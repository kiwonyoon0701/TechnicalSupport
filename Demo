--------------------------------
-- Custom Metric Demo
--------------------------------
1. Create Policy and Role
- Policy
Service : CloudWatch 
Access level : Write - PutMetricData
Name : PutMetricPolicyOnly01
- Role
Name : PutMetricOnlyRole01

2. Assign Role to Oracle Instance

3. Connect to Oracle

4. Show postcutommetric.py and edit
root@oracle11g:/root# cat postcustommetric.py 
import boto3
import random
client = boto3.client('cloudwatch', region_name='ap-northeast-2')
#client.put_metric_data(namespace="LGCNS70in70",name="testmetric",unit="Count",value=3.0)
value = float(random.randint(1,100))
print(value)
# Put custom metrics
client.put_metric_data(
    MetricData=[
        {
            'MetricName': 'LGCNS70in70-Metric',
            'Dimensions': [
                {
                    'Name': 'Instance Name',
                    'Value': 'i-12345'
                },
            ],
            'Unit': 'None',
            'Value': value
        },
    ],
    Namespace='LGCNS70in70NameSpace'
)

5. replace Namespace
:%s/LGCNS70in70/LGCNS70in70-2nd/g

6. 
root@oracle11g:/root# pip install boto3

7. 
root@oracle11g:/root# while true
> do
> python postcustommetric.py 
> sleep 1
> done

8. cloudwatch -> metrics -> 2ndNameSpace -> Graphed metrics
1minute, maximum

9. Actions -> Add to dashboard -> LGCNS70in702nd
Number


--------------------------------
-- CloudWatch Logs Demo
--------------------------------

1. Create Policy
Policy : AWSDC-APNE2-IAM-PO-Cloudwatch-Logs
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
    ],
      "Resource": [
        "arn:aws:logs:*:*:*"
    ]
  }
 ]
}

2. Create Role
Role : AWSDC-APNE2-IAM-RO-Cloudwatch-Logs



3. Assign Role to EC2

4. Install CloudWatch logs agent
sudo yum install -y awslogs

5. Edit configuration file
root@ip-172-31-27-12:/root# vi /etc/awslogs/awscli.conf 
root@ip-172-31-27-12:/root# cat /etc/awslogs/awscli.conf 
[plugins]
cwlogs = cwlogs
[default]
region = ap-northeast-2

root@ip-172-31-27-12:/root# vi /etc/awslogs/awslogs.conf
:%s/application_logs/apache_test3_logs/g

root@ip-172-31-27-12:/root# cat /etc/awslogs/awslogs.conf
[general]
state_file = /var/lib/awslogs/agent-state
[apache_test3_logs]
region = ap-northeast-2
datetime_format = %b %d %H:%M:%S
file = /var/log/application.log
buffer_duration = 5000
log_stream_name = {instance_id}
initial_position = start_of_file
log_group_name = apache_test3_logs

6. Start awslogs service
root@ip-172-31-27-12:/root# service awslogs start
Starting awslogs:                                          [  OK  ]

7. 
root@ip-172-31-27-12:/root# cd /var/log
root@ip-172-31-27-12:/var/log# echo 'Staring application!!' > application.log

8. CloudWatch LOGS 확인 
CloudWatch - Logs - apache_test3_logs

9. 
root@ip-172-31-27-12:/var/log# echo '2nd line log' >> application.log

10. 
root@ip-172-31-27-12:/var/log# cat dummy.sh 
for ((i=0;i<10;i++)); do
echo $i " Started" >> /var/log/application.log
done
root@ip-172-31-27-12:/var/log# chmod u+x dummy.sh 
root@ip-172-31-27-12:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-27-12:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-27-12:/var/log# echo 'ORA-00600' >> application.log 


11. CloudWatch - logs -> Create Metric Filter
Filter Pattern : 0
Filter Pattern : ORA-00600

root@ip-172-31-27-12:/var/log# echo 'ORA-00600' >> application.log 

12. Create ALarm
Period : 1min
2

Filter DEMO
Create Filter - 1분 주기
Creat Alarm
Accept notification

root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log

>> 기다리면 Alarm 발생

Email 확인


--------------------------------
-- Apache Log CloudWatch Logs Demo
--------------------------------
1. service awslogs stop
root@ip-172-31-27-12:/var/log# service awslogs stop

2. edit configuration file to point apache access log
root@ip-172-31-27-12:/var/log# vi /etc/awslogs/awslogs.conf
root@ip-172-31-27-12:/var/log# cat /etc/awslogs/awslogs.conf
[general]
state_file = /var/lib/awslogs/agent-state
[apache_test_logs22]
region = ap-northeast-2
datetime_format = %b %d %H:%M:%S
file = /var/log/httpd/access_log
buffer_duration = 5000
log_stream_name = {instance_id}
initial_position = start_of_file
log_group_name = apache_test_logs22

3. service awslogs start
root@ip-172-31-27-12:/var/log# service awslogs restart

4. curl
kiwony@kiwonymac.com:/Users/kiwony> curl http://15.164.50.100

5. show access_log

6. cloudwatch -> logs 

7. Create Filter
Filter Pattern
[ip, user, username, timestamp, request, status_code = 4*, bytes]

Create Alarm
Apache400Error
Apache400Error-Topic01

8. Accept Notification

9. 
watch -n 1 curl http://15.164.50.100

watch -n 1 curl http://15.164.50.100/a.html

10. View Metric

11. View Alarm

12. Check email notification


[ip, user, username, timestamp, request, status_code = 5*, bytes]

echo '54.239.119.16 - - [01/Aug/2019:02:00:18 +0000] "GET / HTTP/1.1" 501 737 "-" "curl/7.54.0"' >> /var/log/httpd/access_log



--------------------------------
-- EC2 Autoscaling Demo
--------------------------------
1. Launch configuration

2. Auto Scaling Group -> Group 선택 후 Monitoring -> Enable Group Metrics Collection 

3. Cloudwatch -> Alarm -> Creaet Alarm

4. Connect 10-AS-TEST
dd if=/dev/zero of=/dev/null


--------------------------------
-- S3 Monitoring Demo
--------------------------------
from __future__ import print_function

from datetime import datetime
from urllib2 import urlopen
import boto3

print ('loading function')

def lambda_handler(event,contenxt):
	client = boto3.client('s3')
	
	now=datetime.now()
	filename= str(now.year)+"-"+str(now.month)+"-"+str(now.day)+"-"+str(now.hour)+"-"+str(now.minute)+"-"+str(now.second)
	print(filename)
	
	client.put_object(Body='Instance Status Summary', Bucket='lgcns-70in70-demo-kiwony', Key=filename)
    
    
    




