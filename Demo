-- Custom Metric Demo
1. Create Policy and Role
- Policy
Service : CloudWatch 
Access level : Write - PutMetricData
Name : PutMetricPolicyOnly01
- Role
Name : PutMetricOnlyRole01

2. Assign Role to Oracle Instance

3. Connect to Oracle

4. Show postcutommetric.py and edit
root@oracle11g:/root# cat postcustommetric.py 
import boto3
import random
client = boto3.client('cloudwatch', region_name='ap-northeast-2')
#client.put_metric_data(namespace="LGCNS70in70",name="testmetric",unit="Count",value=3.0)
value = float(random.randint(1,100))
print(value)
# Put custom metrics
client.put_metric_data(
    MetricData=[
        {
            'MetricName': 'LGCNS70in70-Metric',
            'Dimensions': [
                {
                    'Name': 'Instance Name',
                    'Value': 'i-12345'
                },
            ],
            'Unit': 'None',
            'Value': value
        },
    ],
    Namespace='LGCNS70in70NameSpace'
)

5. replace Namespace
:%s/LGCNS70in70/LGCNS70in70-2nd/g

6. 
root@oracle11g:/root# pip install boto3

7. 
root@oracle11g:/root# while true
> do
> python postcustommetric.py 
> sleep 1
> done

8. cloudwatch -> metrics -> 2ndNameSpace -> Graphed metrics
1minute, maximum





Connect to Oracle



<hr/>
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
    ],
      "Resource": [
        "arn:aws:logs:*:*:*"
    ]
  }
 ]
}


Policy : AWSDC-APNE2-IAM-PO-Cloudwatch-Logs

Role : AWSDC-APNE2-IAM-RO-Cloudwatch-Logs



Assign Role to EC2

sudo yum install -y awslogs

ec2-user@ip-172-31-25-217:/home/ec2-user> sudo vi /etc/awslogs/awscli.conf 
ec2-user@ip-172-31-25-217:/home/ec2-user> sudo cat  /etc/awslogs/awscli.conf
[plugins]
cwlogs = cwlogs
[default]
region = ap-northeast-2


ec2-user@ip-172-31-25-217:/home/ec2-user> sudo cat /etc/awslogs/awslogs.conf
[general]
state_file = /var/lib/awslogs/agent-state
[application_logs]
region = ap-northeast-2
datetime_format = %b %d %H:%M:%S
file = /var/log/application.log
buffer_duration = 5000
log_stream_name = {instance_id}
initial_position = start_of_file
log_group_name = application_logs


ec2-user@ip-172-31-25-217:/home/ec2-user> sudo service awslogs start
Starting awslogs:   

ec2-user@ip-172-31-25-217:/home/ec2-user> sudo su -
[root@ip-172-31-25-217 ~]# cd /var/log
[root@ip-172-31-25-217 log]# echo 'Staring application!!' > application.log
[root@ip-172-31-25-217 log]# cat application.log
Staring application!!
[root@ip-172-31-25-217 log]# echo '2nd line log' >> application.log

CloudWatch LOGS 확인 

root@ip-172-31-17-17:/var/log# cat dummy.sh 
for ((i=0;i<10;i++)); do
echo $i >> application.log
done

Filter DEMO
Create Filter - 1분 주기
Creat Alarm
Accept notification

for ((i=0;i<100;i++)); do
echo $i >> application.log
done

root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log 
root@ip-172-31-17-17:/var/log# echo 'ORA-00600' >> application.log

>> 기다리면 Alarm 발생


